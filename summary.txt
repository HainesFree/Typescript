TypeScript
5.1 Angular是用TypeScript构建的 
Angular是用TypeScript构建的，或许你会对用新语言来开发Angular心存疑虑， 但事实上， 在开发Angular应用时， 我们有充分的理由用TypeScript代替普通的JavaScript。
TypeScript并不是一门全新的语言， 而是ES6的超集。 所有的ES6代码都
是完全有效且可编译的TypeScript代码。 下图展示了它们之间的关系。 


ES5是ECMAScript 5的缩写， 也被称为“普通的JavaScript”。 ES5就是大家熟知的JavaScript， 它能够运行在大部分浏览器上。 ES6则是下一个版本的JavaScript， 已经于2015年发布。
从TypeScript代码到ES5代码的唯一转换器是由TypeScript核心团队
编写的。 然而， 将ES6代码（不是TypeScript代码） 转换到ES5代码
则有两个主要的转换器： Google开发的Traceur 与JavaScript社区创
建的Babel 。 安装TypeScript环境： 
npm install -g typescript
5.2 TypeScript提供了哪些特性 
TypeScript相对于ES5有五大改善：
类型
类 
注解
模块导入
语言工具包（比如， 解构） 
5.3 类型
顾名思义， 相对于ES6， TypeScript最大的改善是增加了类型系统。
有些人可能会觉得，缺乏类型检查正是JavaScript这些弱类型语言的优
点。 也许你对类型检查心存疑虑， 但我仍然鼓励你试一试。 类型检查的
好处有：
(1) 有助于代码的编写， 因为它可以在编译期预防bug；
(2) 有助于代码的阅读， 因为它能清晰地表明你的意图。另外值得一提的是， TypeScript中的类型是可选的。 如果希望写一些快速代码或功能原型， 可以首先省略类型， 然后再随着代码日趋成熟逐渐
加上类型。
TypeScript的基本类型与我们平时所写JavaScript代码中用的隐式类型一
样， 包括字符串、 数字、 布尔值等。
直到ES5， 我们都在用var关键字定义变量， 比如var name;。
TypeScript的新语法是从ES5自然演化而来的， 仍沿用var来定义变量，
但现在可以同时为变量名提供可选的变量类型了：
var name: string;
在声明函数时， 也可以为函数参数和返回值指定类型：
function greetText(name: string): string {
return "Hello " + name;
} 
这个例子中， 我们定义了一个名为greetText的新函数， 它接收一个名为name的参数。 name: string语法表示函数想要的name参数是string类型。 如果给该函数传一个string以外的参数， 代码将无法编译通过。 对我们来说， 这是好事， 否则这段代码将会引入bug。 
或许你还注意到了， greetText函数在括号后面还有一个新语法:string {。冒号之后指定的是该函数的返回值类型， 在本例中为string。 
这很有用， 原因有二： 
如果不小心让函数返回了一个非string型的返回值， 编译器就会告诉我们这里有错误； 
使用该函数的开发人员也能很清晰地知道自己将会拿到什么类型的数据。
我们来看看如果写了不符合类型声明的代码会怎样 
function hello(name: string): string {
return 12;
} 
当尝试编译代码时， 将会得到下列错误： 
$ tsc compile-error.ts
compile-error.ts(2,12): error TS2322: Type 'number' is not assignable to type 
这是怎么回事？ 我们尝试返回一个number类型的12， 但hello函数期望
的返回值类型为string（它是在参数声明的后面以): string {的形式声明的） 。要纠正它， 可以把函数的返回值类型改为number：
function hello(name: string): number {
return 12;
} 
虽然这只是一个小例子， 但足以证明类型检查能为我们节省大量调试bug的时间。 
5.4 内置类型 
5.4.1 字符串
字符串包含文本， 声明为string类型：
var name: string = 'Tim';
5.4.2 数字
无论整数还是浮点， 任何类型的数字都属于number类型。 在TypeScript
中， 所有的数字都是用浮点数表示的， 这些数字的类型就是number：
var age: number = 36;
5.4.3 布尔类型
布尔类型（boolean） 以true（真） 和false（假） 为值。
var married: boolean = true;	
5.4.4 数组
数组用Array类型表示。 然而， 因为数组是一组相同数据类型的集合，所以我们还需要为数组中的条目指定一个类型。
我们可以用Array<type>或者type[]语法来为数组条目指定元素类
型：
var jobs: Array<string> = ['IBM', 'Microsoft', 'Google'];
var jobs: string[] = ['Apple', 'Dell', 'HP'];
数字型数组的声明与之类似：
var jobs: Array<number> = [1, 2, 3];
var jobs: number[] = [4, 5, 6];
5.4.5 枚举
枚举是一组可命名数值的集合。 比如， 如果我们想拿到某人的一系列角
色， 可以这么写：
enum Role {Employee, Manager, Admin};
var role: Role = Role.Employee;
默认情况下， 枚举类型的初始值是0。 我们也可以调整初始化值的范
围：
enum Role {Employee = 3, Manager, Admin};
var role: Role = Role.Employee;
在上面的代码中， Employee的初始值被设置为3而不是0。 枚举中其他
项的值是依次递增的， 意味着Manager的值为4， Admin的值为5。 同
样， 我们也可以单独为枚举中的每一项指定值：
enum Role {Employee = 3, Manager = 5, Admin = 7};
var role: Role = Role.Employee;
还可以从枚举的值来反查它的名称：
enum Role {Employee, Manager, Admin};
console.log('Roles: ', Role[0], ',', Role[1], 'and', Role[2]);
5.4.6 任意类型
如果我们没有为变量指定类型， 那它的默认类型就是any。 在TypeScript
中， any类型的变量能够接收任意类型的数据：
var something: any = 'as string';
something = 1;
something = [1, 2, 3];
5.4.7 “无”类型
void意味着我们不期望那里有类型。 它通常用作函数的返回值， 表示没
有任何返回值：
function setName(name: string): void {
this.name = name;
}

